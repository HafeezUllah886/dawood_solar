<?php
 namespace App\Http\Controllers; use App\Models\categories; use App\Models\products; use App\Models\quotation; use App\Models\quotationDetails; use Barryvdh\DomPDF\Facade\Pdf; use Exception; use Illuminate\Http\Request; use Illuminate\Support\Facades\DB; class QuotationController extends Controller { public function index() { $quotations = quotation::orderBy("\151\144", "\x64\x65\x73\143")->get(); return view("\x71\165\x6f\164\141\164\x69\157\156\56\x69\x6e\144\x65\x78", compact("\161\165\157\x74\x61\164\151\x6f\156\163")); } public function create() { $products = products::orderby("\x6e\x61\155\x65", "\141\163\x63")->get(); $cats = categories::orderBy("\x6e\x61\x6d\145", "\x61\163\x63")->get(); return view("\161\165\157\x74\141\164\x69\x6f\156\56\143\x72\x65\x61\x74\145", compact("\160\x72\157\144\165\x63\164\x73", "\143\x61\164\163")); } public function store(Request $request) { try { if ($request->isNotFilled("\151\144")) { throw new Exception("\120\x6c\x65\x61\x73\x65\40\x53\145\x6c\x65\143\x74\40\101\164\154\145\x61\x73\164\x20\x4f\156\145\40\x50\x72\x6f\x64\165\x63\164"); } DB::beginTransaction(); $quot = quotation::create(array("\x63\165\163\164\x6f\155\145\x72\x4e\x61\155\x65" => $request->customer, "\x63\x75\x73\164\x6f\x6d\x65\x72\x41\144\x64\162\145\163\x73" => $request->address, "\156\x6f\x74\145\x73" => $request->notes, "\144\151\x73\x63\157\x75\156\164" => $request->discount, "\144\x63" => $request->dc, "\144\141\x74\x65" => $request->date, "\x76\141\154\151\x64\x54\151\x6c\x6c" => $request->valid)); $ids = $request->id; $total = 0; foreach ($ids as $key => $id) { if ($request->amount[$key] > 0) { $qty = $request->qty[$key]; $price = $request->price[$key]; $total += $request->amount[$key]; quotationDetails::create(array("\161\x75\157\164\111\104" => $quot->id, "\160\162\157\144\165\143\x74\111\104" => $id, "\160\162\x69\143\x65" => $price, "\161\x74\x79" => $qty, "\141\155\157\x75\156\x74" => $request->amount[$key])); } } $discount = $request->discount; $dc = $request->dc; $net = $total + $dc - $discount; $quot->update(array("\164\x6f\x74\x61\154" => $net)); DB::commit(); return to_route("\x71\x75\157\x74\141\x74\151\157\x6e\x2e\163\x68\157\167", $quot->id)->with("\163\x75\x63\143\145\163\x73", "\121\165\x6f\164\141\164\151\157\x6e\40\x43\x72\145\x61\164\145\144"); } catch (\Exception $e) { DB::rollback(); return back()->with("\x65\162\162\x6f\x72", $e->getMessage()); } } public function show($id) { $quot = quotation::find($id); return view("\161\165\157\164\141\x74\x69\x6f\x6e\56\x76\151\145\167", compact("\161\165\157\164")); } public function pdf($id) { $quot = quotation::find($id); $pdf = Pdf::loadview("\161\x75\x6f\164\141\x74\151\157\156\56\160\x64\x66", compact("\161\165\x6f\x74")); return $pdf->download("\x51\x75\x6f\x74\141\x74\x69\x6f\156\x20\x4e\157\x2e\40{$quot->id}\x2e\160\144\x66"); } public function edit(quotation $quotation) { } public function update(Request $request, quotation $quotation) { } public function destroy($id) { try { DB::beginTransaction(); $quot = quotation::find($id); foreach ($quot->details as $product) { $product->delete(); } $quot->delete(); DB::commit(); session()->forget("\x63\x6f\x6e\x66\x69\x72\x6d\x65\144\x5f\160\141\x73\x73\x77\x6f\162\x64"); return to_route("\161\x75\157\x74\141\164\151\157\x6e\56\151\x6e\x64\145\x78")->with("\x73\165\x63\143\145\163\x73", "\121\x75\157\x74\x61\164\151\157\156\x20\104\x65\x6c\x65\x74\x65\144"); } catch (\Exception $e) { DB::rollBack(); session()->forget("\x63\157\156\x66\151\x72\155\145\144\x5f\x70\141\163\163\167\x6f\162\x64"); return to_route("\x71\x75\157\164\x61\x74\151\x6f\156\56\151\x6e\x64\145\170")->with("\145\x72\x72\x6f\x72", $e->getMessage()); } } }