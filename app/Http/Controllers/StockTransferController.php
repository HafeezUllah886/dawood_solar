<?php
 namespace App\Http\Controllers; use App\Models\products; use App\Models\stock; use App\Models\stockTransfer; use App\Models\stockTransferDetails; use App\Models\warehouses; use Exception; use Illuminate\Http\Request; use Illuminate\Support\Facades\DB; class StockTransferController extends Controller { public function index() { $transfers = stockTransfer::orderBy("\x69\144", "\x64\145\163\143")->get(); return view("\163\164\x6f\143\x6b\56\x74\x72\x61\x6e\x73\146\145\x72\x2e\151\156\144\x65\x78", compact("\x74\x72\141\x6e\x73\146\x65\x72\x73")); } public function create() { $products = products::orderby("\156\141\x6d\145", "\x61\163\x63")->get(); $warehouses = warehouses::all(); return view("\x73\164\157\143\153\56\164\162\x61\156\163\x66\x65\162\56\x63\x72\145\x61\x74\145", compact("\x70\x72\157\144\x75\x63\x74\163", "\x77\141\162\x65\x68\157\x75\x73\x65\x73")); } public function store(Request $request) { try { if ($request->isNotFilled("\151\x64")) { throw new Exception("\x50\154\145\141\x73\145\40\x53\x65\x6c\x65\143\164\x20\x41\164\154\145\141\163\164\x20\x4f\x6e\x65\x20\x50\162\157\144\x75\x63\x74"); } DB::beginTransaction(); $ref = getRef(); $transfer = stockTransfer::create(array("\x66\162\x6f\x6d\x49\x44" => $request->fromID, "\164\x6f\111\x44" => $request->toID, "\144\x61\164\x65" => $request->date, "\156\x6f\164\x65\163" => $request->notes, "\x75\163\145\162\111\x44" => auth()->user()->id, "\162\145\146\111\104" => $ref)); $ids = $request->id; foreach ($ids as $key => $id) { $qty = $request->qty[$key]; stockTransferDetails::create(array("\x74\162\x61\156\163\146\x65\x72\x49\x44" => $transfer->id, "\160\162\157\144\165\x63\164\x49\104" => $id, "\161\x74\x79" => $qty, "\162\x65\x66\111\104" => $ref)); $warehouseFrom = warehouses::find($request->fromID); $warehouseTo = warehouses::find($request->toID); createStock($id, 0, $qty, $request->date, "\124\162\x61\x6e\x73\x66\145\162\145\144\40\164\157\40{$warehouseTo->name}", $ref, $request->fromID); createStock($id, $qty, 0, $request->date, "\124\x72\x61\156\x73\146\145\x72\x65\144\x20\x66\x72\157\155\x20{$warehouseFrom->name}", $ref, $request->toID); } DB::commit(); return to_route("\x73\164\x6f\143\153\x54\x72\141\156\x73\x66\145\162\x2e\151\156\x64\145\170")->with("\163\165\143\143\x65\x73\163", "\123\x74\157\x63\153\x20\x54\x72\141\156\163\146\x65\162\40\x43\162\x65\x61\x74\145\144"); } catch (\Exception $e) { DB::rollback(); return back()->with("\145\x72\162\x6f\162", $e->getMessage()); } } public function show($id) { $transfer = stockTransfer::find($id); return view("\x73\x74\157\x63\153\x2e\164\x72\141\156\163\146\145\x72\56\166\x69\145\x77", compact("\x74\x72\x61\x6e\x73\x66\x65\x72")); } public function edit(stockTransfer $stockTransfer) { } public function update(Request $request, stockTransfer $stockTransfer) { } public function destroy($id) { try { DB::beginTransaction(); $transfer = stockTransfer::find($id); foreach ($transfer->details as $product) { stock::where("\x72\145\x66\x49\104", $product->refID)->delete(); $product->delete(); } $transfer->delete(); DB::commit(); session()->forget("\x63\x6f\x6e\x66\x69\162\155\145\144\x5f\x70\x61\x73\x73\167\x6f\x72\x64"); return to_route("\163\164\157\143\x6b\x54\x72\x61\x6e\163\146\x65\x72\56\x69\156\144\145\x78")->with("\x73\165\143\143\x65\163\x73", "\x53\x74\157\x63\x6b\40\x54\162\x61\x6e\163\x66\x65\162\x20\104\x65\154\x65\x74\x65\144"); } catch (\Exception $e) { DB::rollBack(); session()->forget("\x63\x6f\156\146\x69\x72\155\145\144\x5f\x70\x61\163\x73\167\x6f\162\x64"); return to_route("\x73\x74\157\x63\x6b\124\x72\x61\156\x73\146\145\x72\x2e\151\x6e\x64\x65\170")->with("\145\x72\x72\157\x72", $e->getMessage()); } } }